#!/usr/bin/env factor
USING: kernel locals multiline command-line io io.launcher io.encodings.utf8 json.reader sets splitting command-line accessors namespaces assocs sequences strings arrays prettyprint system combinators util ;
FROM: namespaces => set ;
IN: setmonitors

/* map available inputs to used inputs (choose how to use available inputs.)
   alternative to kanshi b/c it wasn't working for me. *shrug*
   doesn't automatically run on output (dis)connect, but w/e just keybind it
   in sway config.

   doesn't disable after disconnecting external displays, b/c there's no need; sway
   will put workspaces on whatever displays are available.
   also it's impossible to do that fully automatically, b/c swaymsg -t get_outputs
   doesn't tell about prior-enabled-but-currently-disconnected displays.
*/

SYMBOL: action [ run-process drop ] action set
: act ( x -- ) action get call( x -- ) ; inline

SYMBOL: debug? debug? off

: setoutputs ( oss -- )
  [let { "swaymsg" "-t" "get_outputs" } readproc json> [ "name" swap at ] map :> found-outputs
    debug? get [ "found outputs: " write found-outputs . flush 0 exit ] when
    [ dup [ " " split1-slice drop >string ] map ! stack: rst os out-ids
      dup found-outputs subset?
      [ found-outputs swap diff [ "swaymsg -- output " swap " disable" 3array concat act ] each
        [ "swaymsg -- output " swap append act ] each
        f ]
      [ 2drop t ]
      if ]
    loopseq drop ] ;

: accepted-args ( -- x ) { { "b" "laptop below horizontal monitor" } } ;

SYMBOL: b b off

: main ( -- )
  ! parse cmdline
  command-line get-global
  [ { { [ dup "--dry-run" = ] [ drop [ print ] action set ] }
        { [ dup "tv" = ] [ drop
                           { { "HDMI-A-2 enable transform 0 position 0 0"
                               "eDP-1    enable position 1921 0" } }
                           setoutputs 0 exit ] }
        { [ dup "b" = ] [ drop b on ] }
        { [ t ] [ "invalid arg: " write print "accepted args are: --dry-run, tv, b" print -1 exit ] }
      } cond t ] loopseq drop

  ! set monitors. config is inlined. nb. HDMI-A-1 is the HDMI port, A-2 the minidisplay port.
  ! when i physically rotate monitors, swap transforms and positions
  { /* { "HDMI-A-1 enable transform 0 position 0 0"       ! left
         "HDMI-A-2 enable transform 90 position 1080 112" ! right
         "eDP-1    enable position 1080 1192" }           ! 112 + 1080
    */
    
    ! current default
    { "HDMI-A-1 enable transform 0 position 0 0"
      "HDMI-A-2 enable transform 90 position 1920 -146"
      "eDP-1    enable position 0 1081" } }

  b get
  { "HDMI-A-2 enable position 0 0"
    "eDP-1    enable position 0 1080" }
  { "HDMI-A-2 enable position 0 0 transform 0" }
  ?
  suffix

  { { "HDMI-A-1 enable" }
    { "eDP-1 enable" } }
  append

  setoutputs ;
MAIN: main
