#!/usr/bin/env racket
#lang racket/base

(require racket/cmdline racket/system racket/match (only-in racket/function identity)
         (only-in racket/string string-prefix?)
         racket/port)

;; ow: "open with:" use fzf to open a program interactively
;; tip: create an alias about ow where the program to execute
;; is xdg-open. however, xdg-open doesn't account for whether
;; the program is interactive or not.

;; TODO:
;; include auto-interactivity based on program name.
  ;; sometimes leave fzf open while an interactive child process runs (e.g. mplayer)
;; fails when file name contains single quotes. might also fail for other particular characters

;; TODO: support synchronous process/piping. see
;; programming/racket/racket/collects/racket/system.rkt for definition of system*.

(define interactive? #f)
(define recurse? #f)

(command-line
  #:once-each [("-i" "--interactive") "use if the program that you specify runs interactively in the terminal, e.g. for the nano text editor" (set! interactive? #t)]
              [("-r" "--recurse") "" (set! recurse? #t)]
  #:ps "\nopen file selected by fzf with a given program.\n\nif you don't supply a directory, then the current directory's descendants are lazily loaded; if you specify a directory with --recurse, then its descendants are loaded strictly.)"
  #:args (prog . opt-dir)
  (let ([dir (if (null? opt-dir) #f (car opt-dir))])
    (when dir
      (unless (directory-exists? dir)
      (fprintf (current-error-port) "directory ~a doesn't exist.~n" dir)
      (when (string-prefix? dir "-")
        (fprintf (current-error-port) "you probably meant to supply ~a as an option before ~a.~n" dir prog))
      (exit 1)))
    (let ([X (if (and (not dir) recurse?)
                 #f
                 (match (apply process*/ports #f (open-input-string "") 'stdout
                               (find-executable-path "find")
                               (cons (or dir ".") (if recurse? '() (list "-maxdepth" "1"))))
                   [(list src _input _pid _err ask) #;(ask 'wait) src]))])
      (when X (current-input-port X))
      (system* (find-executable-path "fzf")
                 "-e"
                 "--bind"
                 (string-append "enter:"
                                (if interactive?
                                    (format "execute(~a {})+abort" prog)
                                    (format "execute-silent(~a {} &)" prog))))
      (when X (close-input-port X)))))
