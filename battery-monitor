#!/usr/bin/env racket
#lang racket/base

(require "powerline" (rename-in racket/system (system* SS)) racket/cmdline)

;; triggers an alert each time battery becomes low enough.
;; suspends (TODO: hibernate) if battery becomes even lower.
;; TODO: use wall(1) when not running in a graphical session
;; TODO: why were there multiple instances of this running? run a daemon that tracks the number of battery-monitor processes, to alert
;; me when the number exceeds 1.

(define alerted? #f)
(define (system* p . args) (apply SS (find-executable-path p) args))

(define warn-thres 15)
(define sleep-thres 10)

(command-line
 #:once-each [("-w" "--warn")  x "warning threshold" (set! warn-thres x)]
             [("-s" "--sleep") x "sleeping threshold" (set! sleep-thres x)]
 #:ps "thresholds represent events triggered when battery percent falls to the given number"
 #:args _
 (let repeat ()
  (void (let ([bamt (get-charge%)])
          (cond [(>= bamt warn-thres) (set! alerted? #f)]
                [(and (not alerted?) (< bamt warn-thres))
                 (system* "notify-send" "-u" "critical" "LOW BATTERY" (format "~a%" (floor bamt)))
                 (system* "mpv" "--vid=no" "--volume=50" "/home/nic/programming/ssbm-challenger.mp3")
                 (set! alerted? #t)]
                [(and alerted? (< bamt sleep-thres) (not (plugged-in?)))
                 (set! alerted? #t)
                 (system* "systemctl" "suspend")])))
  (sleep 60)
  (repeat)))
