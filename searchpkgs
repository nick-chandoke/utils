#!/usr/bin/env racket
#lang typed/racket/base

;;; package manager abstraction layer. currently works only for nix.

;; TODO: like any search program, it should cluster search results' terms, so that user can see overview of
;; results' span, and refine their search.

;; TODO: does not find zenity (full name gnome3.zenity), even when not using the -A option.

(provide (all-defined-out))
(require "json-extra.rkt"
         srfi/2
         (only-in racket/list make-list append*)
         (only-in racket/string string-split string-join)
         (only-in racket/cmdline parse-command-line) ;; fortunately its type instantiation is irrelevant here
         (only-in racket/system process* system*) ;; read from nix-env -qaP
         (only-in racket/match match) ;; used against process*/ports' returned ports
         (only-in typed/db query query-rows disconnect SQL-Datum)
         (only-in typed/db/sqlite3 sqlite3-available? sqlite3-connect)
         (only-in typed/json JSExpr read-json))

(: split-string-at-every/word-boundary (-> Natural String (Listof String)))
(define (split-string-at-every/word-boundary l s)
  (let* ([ws (string-split s)]
         [cur-line-str : String (car ws)]
         [acc : (Listof String) null])
    (for ([w (cdr ws)])
      (if (>= (+ (string-length w) (string-length cur-line-str)) l)
          (begin (set! acc (cons cur-line-str acc))
                 (set! cur-line-str w))
          (set! cur-line-str (string-append cur-line-str " " w))))
    (reverse (cons cur-line-str acc))))

(define-syntax-rule (pad s l) (string-append s (make-string l #\space)))

(define col2-max-len : Natural 60)

;; if we want to display any more, just export to html, and let browser lay it out as a <table>
;; then again, this function generalizes to columns & lists
(: pretty-print (-> (Listof (Vectorof String)) Void))
(define (pretty-print vs)
  (let* ([x (foldr (λ ([v : (Vectorof String)] [acc : (Pairof (Listof (Immutable-Vector String Nonnegative-Fixnum String Nonnegative-Fixnum String)) (Pairof Nonnegative-Fixnum Natural))])
                     (let* ([name-ver (format "~a ~a" (vector-ref v 0) (vector-ref v 2))]
                            [name-ver-len : Nonnegative-Fixnum (string-length name-ver)]
                            [homepage (vector-ref v 3)]
                            [homepage-len : Nonnegative-Fixnum (string-length homepage)])
                       (cons (cons (vector-immutable name-ver name-ver-len homepage homepage-len (vector-ref v 1))
                                   (car acc))
                             (cons (ann (max name-ver-len homepage-len (cadr acc)) Nonnegative-Fixnum)
                                   (add1 (cddr acc))))))
                   (cons (ann null (Listof (Immutable-Vector String Nonnegative-Fixnum String Nonnegative-Fixnum String))) (cons (ann 0 Nonnegative-Fixnum) 0))
                   vs)]
         [vs (car x)]
         [col1-len (cadr x)]
         [final-index (- (cddr x) 1)])
    (unless (null? vs)
      (printf "┌~a~a~a┐~n" (make-string (+ 1 col1-len) #\─) "┬" (make-string 62 #\─)))
    (for ([v vs] [i (in-naturals)]) ; v : (Immutable-Vector String Nonnegative-Fixnum String Nonnegative-Fixnum String)
      (let* ([name-ver (vector-ref v 0)]
             [name-ver-len (vector-ref v 1)]
             [homepage (vector-ref v 2)]
             [homepage-len (vector-ref v 3)]
             [desc-raw (vector-ref v 4)]
             [padded-name-ver (pad name-ver (- col1-len name-ver-len))]
             [padded-homepage (pad homepage (- col1-len homepage-len))]
             [desc/wb (let* ([x0 (split-string-at-every/word-boundary col2-max-len (if (string=? "" desc-raw) "<no description>" desc-raw))]
                             [num-lines (length x0)])
                        ;; ensure that x0 is at least 2 lines, to accomodate the name+ver and homepage
                        (if (< num-lines 2)
                            (append x0 (make-list (- 2 num-lines) ""))
                            x0))]
             [desc/wb-len (length desc/wb)] ;; number of rows in description
             [padded-name-ver-homepage-list (if (> desc/wb-len 2)
                                                (cons padded-name-ver (cons padded-homepage (make-list (- desc/wb-len 2) (make-string col1-len #\space))))
                                                (list padded-name-ver padded-homepage))])
        (for ([x padded-name-ver-homepage-list] [y desc/wb])
          (printf "│~a │ ~a│~n" x (pad y (- (+ 1 col2-max-len) (string-length y)))))
        (if (< i final-index)
            (printf "├~a~a~a┤~n" (make-string (+ 1 col1-len) #\─) "┼" (make-string (+ col2-max-len 2) #\─))
            (printf "└~a~a~a┘~n" (make-string (+ 1 col1-len) #\─) "┴" (make-string (+ col2-max-len 2) #\─)))))))

(module+ main
  (unless (sqlite3-available?) (exit "sqlite3 library not found. you need to install it first."))

  ;; cmdline opts
  (define name     : (Option String) #f)
  (define desc     : (Option String) #f)
  (define update?  : Boolean #f)
  (define exact?   : Boolean #f)
  (define either   : (Option String) #f)
  (define pkgset   : (Option String) #f)

  ;; general globals
  (define homedir  : String (path->string (find-system-path 'home-dir)))
  (define dbloc    : String (string-append homedir ".nixpkgs.db"))

  ;; flag
  (define b/c-no-file? : Boolean #f)

  (or (and-let*
       ([nix-env (find-executable-path "nix-env")]
        [nix-channel (find-executable-path "nix-channel")])

       ((inst parse-command-line Void)
        (find-system-path 'run-file)
        (current-command-line-arguments)
        `((once-each
           (("-n" "--name")
            ,(λ (_ n) (set! name (assert n string?)))
            (("search package name by sql regex, or if used with -u/--update, select packgages by a nix-env(1)-compatible selector") . ("n")))
           (("-d" "--description")
            ,(λ (_ d) (set! desc (assert d string?)))
            (("search package description by sql regex") . ("d")))
           (("-A" "--pkgset")
            ,(λ (_ p) (set! pkgset (assert p string?)))
            (("consider only one package set e.g. nixos, nixpkgs, or koi, instead of considering all in nix-channel(1)") . ("p")))
           (("-u" "--update")
            ,(λ (_) (set! update? #t))
            (("update pkg database (using pkgupdate) before searching (or update & exit if neither -n nor -d specified). if you enter a package selector (see nix-env(1)§Selectors) without a description (i.e. use only the -n flag), then only packages whose names match the selector are updated.") . ()))
           (("-e" "--exact")
            ,(λ (_) (set! exact? #t))
            (("search terms exactly, instead of searching for names or values that contain the given term") . ()))))
        ;; these args are (Listof Any) String ..., though we're using x . rst syntax.
        ;; somehow (length keywords) gives 0, though (car keywords) returns its 1st elem (assuming that it has one, of course.)
        (λ (_ . keywords)
          (let ([s (string-join (cast keywords (Listof String)) " ")])
            (unless (string=? "" s) (set! either s))))
        '("keywords"))

       (unless (file-exists? dbloc)
         (set! update? #t)
         (set! b/c-no-file? #t))

       (when (and update? (not name) (file-exists? dbloc)) (delete-file dbloc))

       (let ([dbconn (sqlite3-connect #:database dbloc #:mode (if update? (if name 'read/write 'create) 'read-only))])
         (when update?
           (displayln (if pkgset (string-append "updating " (cast pkgset String) "...") "updating all nix channels..."))
           (unless (apply system* nix-channel (list* "--update" (if pkgset (list (cast pkgset String)) null)))
             (exit))
           (when b/c-no-file? (printf "file ~a not found. building db...~n" dbloc))
           (query dbconn "create table nixpkgs(name, description, version, homepage, primary key (name asc))")
           (match
               (apply process* nix-env "-qa" "--json"
                      ;; no idea why no automatic refinement for name nor pkgset here
                      (append
                       (if name (list (assert name string?)) null) ;; name is used as a selector here
                       (if pkgset (list "-A" (assert pkgset string?)) null)))
             [(list source sink _pid err _ask)
              (let ([nothing-found? (= 0 (for/fold ([last-str-len : Natural 0])
                                                   ([(_ v) (in-jshash source)])
                                           ;; TODO: change name to be the key when looping through the json dict; that's the name
                                           ;; to put in your config file when installing stuff...sometimes, apparently.
                                           (let-values ([(name desc ver home) ;; NB. name & desc shadow
                                                         (mhash-ref v
                                                                    ['pname : String]
                                                                    ['meta 'description : String #f]
                                                                    ['version : String ""]
                                                                    ['meta 'homepage : (U String (Listof String)) ""])])
                                             (if desc ;; some packages (like nixos.all-cabal-hashes) do not have descriptions, are not ordinary packages, and should be disqualified
                                                 (let* ([os (format "~a ~a" (if update? "updating" "adding") name)]
                                                        [cur-str-len (string-length os)]
                                                        [sd (- last-str-len cur-str-len)])
                                                   (if (positive? sd)
                                                       (printf "\r~a~a" os (make-string sd #\space))
                                                       (printf "\r~a" os))
                                                   (query dbconn "insert or replace into nixpkgs values ($1, $2, $3, $4)" name desc ver (if (list? home) (car home) home))
                                                   (string-length os))
                                                 last-str-len))))])
                (when (and name nothing-found?)
                  (printf "~nno packages matched selector \"~a\", so no packages were updated." name)))
              (close-input-port source)
              (close-output-port sink)
              (close-input-port err)])
           (display "\n"))

         (let* ([% (λ ([s : String]) (if exact? s (format "%~a%" s)))]
                [result-set
                 : (Listof (Vectorof SQL-Datum))
                 ;; again, why no refinement?
                 (cond [either (query-rows dbconn "select * from nixpkgs where name like $1 or description like $1" (% (assert either string?)))]
                       [(and name desc) (query-rows dbconn "select * from nixpkgs where name like $1 and description like $2" (% (assert name string?)) (% (assert desc string?)))]
                       [name (query-rows dbconn "select * from nixpkgs where name like $1" (% (assert name string?)))]
                       [desc (query-rows dbconn "select * from nixpkgs where name like $1" (% (assert desc string?)))]
                       [else null])])
           (disconnect dbconn)
           (if (null? result-set)
               (if update?
                   (void) ;; update would've already said that no packages were found
                   (displayln "no matching packages found."))
               (pretty-print (cast result-set (Listof (Vectorof String))))))))
      (error "program `nix-env` not found")))
